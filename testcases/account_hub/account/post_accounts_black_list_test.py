# NOTE: Generated By HttpRunner v4.3.5
# FROM: .\testcases\account_hub\account\post_accounts_black-list.yml
import pytest

from httprunner import HttpRunner, Config, Step, RunRequest
from httprunner import Parameters


class TestCasePostAccountsBlackList(HttpRunner):
    @pytest.mark.parametrize(
        "param",
        Parameters(
            {
                "name-identity": [
                    ["黑名单流程-手机号黑名单", "$phone_number"],
                    ["黑名单流程-用户名黑名单", "$username"],
                    ["黑名单流程-邮箱黑名单", "$email"],
                ]
            }
        ),
    )
    def test_start(self, param):
        super().test_start(param)

    config = (
        Config("/accounts/batch B端:批量注册用户")
        .variables(
            **{
                "url": "${ENV(BASE_URL)}",
                "phone_number": "${black_list($url,1)}",
                "username": "${black_list($url,2)}",
                "email": "${black_list($url,3)}",
            }
        )
        .base_url("${ENV(BASE_URL)}")
    )

    teststeps = [
        Step(
            RunRequest("$name")
            .post("/accounts/black-list")
            .with_json({"identity": "$identity", "operatorId": 1, "pid": "account"})
            .validate()
            .assert_equal("status_code", 200)
        ),
        Step(
            RunRequest("检查账号标识是否在黑名单")
            .get("/accounts/black-list/check")
            .with_params(**{"identity": "$identity"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_contains("text", "true")
        ),
        Step(
            RunRequest("查询所有的黑名单用户")
            .get("/accounts/black-list/list")
            .validate()
            .assert_equal("status_code", 200)
            .assert_contains("text", "$identity")
        ),
        Step(
            RunRequest("将账号标识从黑名单移除")
            .delete("/accounts/black-list")
            .with_params(**{"identity": "$identity"})
            .validate()
            .assert_equal("status_code", 200)
        ),
        Step(
            RunRequest("检查账号标识是否在黑名单中删除")
            .get("/accounts/black-list/check")
            .with_params(**{"identity": "$identity"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_contains("text", "false")
        ),
        Step(
            RunRequest("操作用户黑名单  加入黑名单")
            .post(
                "/accounts/black-list/operate?identity=$identity&pid=account&operatorId=1"
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_contains("text", "true")
        ),
        Step(
            RunRequest("检查账号标识是否在黑名单")
            .get("/accounts/black-list/check")
            .with_params(**{"identity": "$identity"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_contains("text", "true")
        ),
        Step(
            RunRequest("操作用户黑名单  删除黑名单")
            .post(
                "/accounts/black-list/operate?identity=$identity&pid=account&operatorId=1"
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_contains("text", "true")
        ),
        Step(
            RunRequest("检查账号标识是否在黑名单中删除")
            .get("/accounts/black-list/check")
            .with_params(**{"identity": "$identity"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_contains("text", "false")
        ),
    ]


if __name__ == "__main__":
    TestCasePostAccountsBlackList().test_start()
