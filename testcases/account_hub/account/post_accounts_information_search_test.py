# NOTE: Generated By HttpRunner v4.3.5
# FROM: .\testcases\account_hub\account\post_accounts_information_search.yml
import pytest

from httprunner import HttpRunner, Config, Step, RunRequest
from httprunner import Parameters


class TestCasePostAccountsInformationSearch(HttpRunner):
    @pytest.mark.parametrize(
        "param",
        Parameters(
            {
                "name-status_code-msg-type": [
                    ["信息化系统用户综合查询接口-使用用户ID查询一个存在的用户 ", 200, "id", 1],
                    ["信息化系统用户综合查询接口-使用用户ID查询一个不存在的用户 ", 200, "items", 2],
                    ["信息化系统用户综合查询接口-使用productId查询用户 ", 200, "productId", 3],
                    ["信息化系统用户综合查询接口-使用时间段查询用户 ", 200, "createdAt", 4],
                    ["信息化系统用户综合查询接口-使用已经注册手机号查询用户 ", 200, "phoneNumber", 5],
                    ["信息化系统用户综合查询接口-使用未注册手机号查询用户 ", 200, "items", 6],
                    ["信息化系统用户综合查询接口-使用错误的手机号查询用户 ", 200, "items", 7],
                    ["信息化系统用户综合查询接口-查询未注销的用户 ", 200, "close", 8],
                    ["信息化系统用户综合查询接口-查询注销中的用户 ", 200, "close", 9],
                    ["信息化系统用户综合查询接口-查询已注销的用户 ", 200, "close", 10],
                    ["信息化系统用户综合查询接口-查询绑定了内部账号的用户 ", 200, "accountType", 11],
                    ["信息化系统用户综合查询接口-查询没有绑定内部账号的用户 ", 200, "accountType", 12],
                ]
            }
        ),
    )
    def test_start(self, param):
        super().test_start(param)

    config = (
        Config("/accounts/information/search 信息化系统用户综合查询接口")
        .variables(**{"url": "${ENV(BASE_URL)}"})
        .base_url("${ENV(BASE_URL)}")
    )

    teststeps = [
        Step(
            RunRequest("$name")
            .setup_hook("${accounts_information_search($request,$type)}")
            .post("/accounts/information/search")
            .validate()
            .assert_equal("status_code", "$status_code")
            .assert_contains("text", "$msg")
        ),
    ]


if __name__ == "__main__":
    TestCasePostAccountsInformationSearch().test_start()
