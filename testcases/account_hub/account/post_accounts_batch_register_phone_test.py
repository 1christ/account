# NOTE: Generated By HttpRunner v4.3.5
# FROM: .\testcases\account_hub\account\post_accounts_batch_register_phone.yml
import pytest

from httprunner import HttpRunner, Config, Step, RunRequest
from httprunner import Parameters


class TestCasePostAccountsBatchRegisterPhone(HttpRunner):
    @pytest.mark.parametrize(
        "param",
        Parameters(
            {
                "name-code-status_code-msg": [
                    ["通用批量手机注册-传不存在的pid", 1, 403, "不合法的pid"],
                    ["通用批量手机注册-pid传空", 2, 400, "size must be between 1 and 10"],
                    ["通用批量手机注册-phone_number 传空", 3, 400, "d{7,20"],
                    ["通用批量手机注册-传不符合格式的 phone_number", 4, 400, "d{7,20"],
                    ["通用批量手机注册-通过phone_number创建一个账号", 5, 200, "true"],
                    ["通用批量手机注册-通过phone_number创建多个账号", 6, 200, "true"],
                    ["通用批量手机注册-通过phone_number 手机号已经注册", 7, 200, "false"],
                ]
            }
        ),
    )
    def test_start(self, param):
        super().test_start(param)

    config = (
        Config("/accounts/batch/register/phone 通用批量手机注册")
        .variables(**{"url": "${ENV(BASE_URL)}"})
        .base_url("${ENV(BASE_URL)}")
    )

    teststeps = [
        Step(
            RunRequest("$name")
            .setup_hook("${account_batch_register_phone($request,$code)}")
            .post("/accounts/batch/register/phone")
            .validate()
            .assert_equal("status_code", "$status_code")
            .assert_contains("text", "$msg")
        ),
    ]


if __name__ == "__main__":
    TestCasePostAccountsBatchRegisterPhone().test_start()
